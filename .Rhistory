1/0.35
1/3
### The coefficient of variation and
### developmental variability
CV = seq(0.1,0.5,length=10)
Shape = round(1/CV^2) #100,11,4
ErlangInsectSimple
###The RCPP code
sourceCpp(here("RCPP","ERLANGSIMPLE.cpp"))
library(rootSolve)
library(viridis)
library(Rcpp)
library(deSolve)
library(here)
library(ggplot2)
library(reshape2)
library(fields)
library(patchwork)
library(prcama)
install.packages('pracma')
### The coefficient of variation and
### developmental variability
CV = seq(0.1,0.5,length=10)
Shape = round(1/(CV^2)) #100,11,4
Shape
###parameters
params_4   <-   c(n=4, dev =0.02 ,mu = 0.33)
params_6   <-   c(n=6, dev =0.02 ,mu = 0.33)
params_11  <-   c(n=11, dev =0.02 ,mu = 0.33)
params_25  <-   c(n=25, dev =0.02 ,mu = 0.33)
params_100 <-   c(n=100, dev =0.02 ,mu = 0.33)
###initial starting values
xinitial_4   <-  c(S1 = c(2000, rep(0,3)), S2 = 0)
xinitial_6   <-  c(S1 = c(2000, rep(0,5)), S2 = 0)
xinitial_11  <-  c(S1 = c(2000, rep(0,10)), S2 = 0)
xinitial_25  <-  c(S1 = c(2000, rep(0,24)), S2 = 0)
xinitial_100 <-  c(S1 = c(2000, rep(0,99)), S2 = 0)
times <- seq(0,200,0.5)
out_put_4 <- data.frame(ode(
y = xinitial_4 ,
times = times,
func =ErlangInsectSimple,
parms =  params_4))
Rcpp::sourceCpp("RCPP/ERLANGSIMPLE.cpp")
out_put_4 <- data.frame(ode(
y = xinitial_4 ,
times = times,
func =ErlangInsectSimple,
parms =  params_4))
out_put_4
plot(out_put_4$S2)
###parameters
params_4   <-   c(n=4, dev =0.2 ,mu = 0.33)
out_put_4 <- data.frame(ode(
y = xinitial_4 ,
times = times,
func =ErlangInsectSimple,
parms =  params_4))
plot(out_put_4$S2)
1/0.03
###parameters
params_4   <-   c(n=4, dev =0.03 ,mu = 0.33)
params_6   <-   c(n=6, dev =0.03 ,mu = 0.33)
params_11  <-   c(n=11, dev =0.03 ,mu = 0.33)
params_25  <-   c(n=25, dev =0.03 ,mu = 0.33)
params_100 <-   c(n=100, dev =0.03 ,mu = 0.33)
###initial starting values
xinitial_4   <-  c(S1 = c(2000, rep(0,3)), S2 = 0)
xinitial_6   <-  c(S1 = c(2000, rep(0,5)), S2 = 0)
xinitial_11  <-  c(S1 = c(2000, rep(0,10)), S2 = 0)
xinitial_25  <-  c(S1 = c(2000, rep(0,24)), S2 = 0)
xinitial_100 <-  c(S1 = c(2000, rep(0,99)), S2 = 0)
times <- seq(0,200,0.5)
out_put_4 <- data.frame(ode(
y = xinitial_4 ,
times = times,
func =ErlangInsectSimple,
parms =  params_4))
plot(out_put_)
plot(out_put_4$S2)
out_put_100 <- data.frame(ode(
y = xinitial_100 ,
times = times,
func =ErlangInsectSimple,
parms =  params_100))
points(out_put_100$s2,col='red')
points(out_put_100$s2,col='red')
points(out_put_100$S2,col='red')
plot(out_put_100$S2,col='red')
plot(out_put_100$S2,col='red',type='l')
lines(out_put_4$S2)
1/0.03
1/30
?uniroot.all
optim_insect_damage <- function(initial_val){
xint= c(S1 = c(initial_val, rep(0, shape_loop - 1)), S2 = 0)
out_put_2 <-
data.frame(ode(
y = xint ,
time = seq(1,200,1/10),
func = ErlangInsect,
parms = dparams
))
#This calculates the area under curve
deriv_EIL_2 <- function(t) {
return(approxfun(out_put_2$S2 - EILDAMAGE)(t))
}
intervals_2 <- uniroot.all(
deriv_EIL_2,
interval = c(1, 200, 1/10),
maxiter = 6000,
tol = .Machine$double.eps ^ 0.05,
n = 1e5)
if (length(intervals_2) == 2){
total_sum_2 <-  integrate(deriv_EIL_2,
lower= intervals_2[[1]],
upper = intervals_2[[2]],
rel.tol=.Machine$double.eps^.05 )$value
}
else if (length(intervals_2)==1){
total_sum_2 <-  integrate(deriv_EIL_2,
lower= intervals_2[[1]],
upper = 200,
rel.tol=.Machine$double.eps^.05 )$value
}
else {total_sum_2 <- 0}
###this is what we're trying to make equal
return((total_sum - total_sum_2)^2)
}
Shape
onesp_insect_damage <- function(EIL,
initial,
user_params){
###If the max n shape is 100, tht means this would ultimately
###have the highest abundance
initial_shape_params <- user_params #Puts the parameter in to a variable
initial_shape_params['n'] = 100  #makes the shape 100
xinitial_compare = c(S1 = c(initial, rep(0, 99)), S2 = 0)
EILDAMAGE <<- EIL
OUT_PUT_1 <- data.frame(
ode(y = xinitial_compare ,
times = seq(1,200,1/10),
func = ErlangInsect,
parms = initial_shape_params))
#This calculates the
#Area under curve above what we consider
#the economic threshold
deriv_EIL_C <- function (t) {
return(approxfun(OUT_PUT_1$S2 - EILDAMAGE)(t))
}
###uniroot try to find when the species curve hits
### the ET
intervals_C <- uniroot.all(
deriv_EIL_C,
interval = c(1, 200),
maxiter = 6000,
tol = .Machine$double.eps ^ 0.05,
n = 1e5)
#There might be a case where the species abundance
#does not even cross the economic threshold
### if the length is 2 that means that there is interval
if (length(intervals_C) == 2){
###Integrate the total area
total_sum <-  integrate(deriv_EIL_C,
lower= intervals_C[[1]],
upper = intervals_C[[2]],
rel.tol=.Machine$double.eps^.05 )$value
}
###It goes past 200 then just stop at 200
else if (length(intervals_C)==1){
total_sum <-  integrate(deriv_EIL_C,
lower= intervals_C[[1]],
upper = 200,
rel.tol=.Machine$double.eps^.05 )$value
}
### if it's under the threshold
else {
total_sum <- 0
}
#End of the n= 100 section#
###THIS IS THE OPTIMIZING FUNCTION as in we are
###trying to find the initial value for
###different shape parameter that would
###match the total damage above the EIL for n=100
optim_insect_damage <- function(initial_val){
xint= c(S1 = c(initial_val, rep(0, shape_loop - 1)), S2 = 0)
out_put_2 <-
data.frame(ode(
y = xint ,
time = seq(1,200,1/10),
func = ErlangInsect,
parms = dparams
))
#This calculates the area under curve
deriv_EIL_2 <- function(t) {
return(approxfun(out_put_2$S2 - EILDAMAGE)(t))
}
intervals_2 <- uniroot.all(
deriv_EIL_2,
interval = c(1, 200, 1/10),
maxiter = 6000,
tol = .Machine$double.eps ^ 0.05,
n = 1e5)
if (length(intervals_2) == 2){
total_sum_2 <-  integrate(deriv_EIL_2,
lower= intervals_2[[1]],
upper = intervals_2[[2]],
rel.tol=.Machine$double.eps^.05 )$value
}
else if (length(intervals_2)==1){
total_sum_2 <-  integrate(deriv_EIL_2,
lower= intervals_2[[1]],
upper = 200,
rel.tol=.Machine$double.eps^.05 )$value
}
else {total_sum_2 <- 0}
###this is what we're trying to make equal
return((total_sum - total_sum_2)^2)
}
shapes_initial = NULL
#These shapes are of interest
shapes <- c(100,48,28,18,13,10,7,6,5,4)
for (s in seq(1,length(shapes))){
dparams <- user_params
shape_loop <-  shapes[s]
dparams['n']<-  shapes[s]
optim_initial <- optim(par =c(par=1000),
fn =
optim_insect_damage ,
method = "Brent",
lower =1, upper = 5000)
shapes_initial[[s]] <- c(shape_loop, optim_initial$par)
}
return(do.call(rbind,shapes_initial))
}
xinitial_100 <-  c(S1 = c(2000, rep(0,99)), S2 = 0)
###The highest abundance of n=100
max(out_put_100$S2)
plot(out_put_100$S2)
max(out_put_4$S2)
####################################
###Action thresholds and Decay Rate#
####################################
AT <-  c(10,25,50,75,100,150)
decay <- round(seq(0.01, 1/7,length=10),2)
decay <- round(seq(0.01, 1/7,length=10),2)
AT_decay_shape <- expand.grid(AT, decay, Shape)
AT_decay_shape
colnames(out_put_100)
colnames(AT_decay_shape )
AT_decay_shape <- expand.grid(AT=AT,decay= decay,Shape= Shape)
colnames(AT_decay_shape )
AT_decay_shape
args(onesp_insect_damage)
params_SS   <-   c(n=4, dev =1/30 ,mu = 0.33)
###parameters
params_4   <-   c(n=4, dev =1/30 ,mu = 0.33)
params_6   <-   c(n=6, dev =1/30 ,mu = 0.33)
params_11  <-   c(n=11, dev =1/30 ,mu = 0.33)
params_25  <-   c(n=25, dev =1/30 ,mu = 0.33)
params_100 <-   c(n=100, dev =1/30 ,mu = 0.33)
###initial starting values
xinitial_4   <-  c(S1 = c(1000, rep(0,3)), S2 = 0)
xinitial_6   <-  c(S1 = c(1000, rep(0,5)), S2 = 0)
xinitial_11  <-  c(S1 = c(1000, rep(0,10)), S2 = 0)
xinitial_25  <-  c(S1 = c(1000, rep(0,24)), S2 = 0)
xinitial_100 <-  c(S1 = c(1000, rep(0,99)), S2 = 0)
times <- seq(0,200,0.5)
out_put_4 <- data.frame(ode(
y = xinitial_4 ,
times = times,
func =ErlangInsectSimple,
parms =  params_4))
plot(out_put_4$S2)
out_put_100 <- data.frame(ode(
y = xinitial_100 ,
times = times,
func =ErlangInsectSimple,
parms =  params_100))
###The highest abundance of n=100; 581.94
max(out_put_100$S2)
###The highest abundance of n =4; 159.10
max(out_put_4$S2)
source("~/.active-rstudio-document", echo=TRUE)
###The initial finder holds the initial I should have
Initial_Finder <- NULL
for (E in seq(1, length(AT))) {
Initial_Finder[[E]] =
cbind(rbind(onesp_insect_damage(AT[E],
1000,  params_SS),
AT[E]))
}
source("~/.active-rstudio-document", echo=TRUE)
params_SS   <-   c(n=4, dev =1/30 ,mu = 0.33)
###The initial finder holds the initial I should have
Initial_Finder <- NULL
for (E in seq(1, length(AT))) {
Initial_Finder[[E]] =
cbind(rbind(onesp_insect_damage(AT[E],
1000,  params_SS),
AT[E]))
}
source("~/.active-rstudio-document", echo=TRUE)
Initial_Finder[[E]] =
cbind(rbind(onesp_insect_damage(AT[E],
1000,  params_SS),
AT[E]))
intervals_2 <- uniroot.all(
deriv_EIL_2,
interval = c(1, 200),
maxiter = 6000,
tol = .Machine$double.eps ^ 0.05,
n = 1e5)
source("~/.active-rstudio-document", echo=TRUE)
decay <- round(seq(0.01, 1/7,length=10),2)
AT_decay_shape <- expand.grid(AT=AT,decay= decay,Shape= Shape)
params_SS   <-   c(n=4, dev =1/30 ,mu = 0.33)
###The initial finder holds the initial I should have
Initial_Finder <- NULL
for (E in seq(1, length(AT))) {
Initial_Finder[[E]] =
cbind(rbind(onesp_insect_damage(AT[E],
1000,  params_SS),
AT[E]))
}
Initial_Finder
dparams['n']
E=1
###The initial finder holds the initial I should have
Initial_Finder <- NULL
for (E in seq(1, length(AT))) {
Initial_Finder[[E]] =
cbind(rbind(onesp_insect_damage(AT[E],
1000,  params_SS)),
AT[E]))
}
Initial_Finder[[E]] =
cbind(rbind(onesp_insect_damage(AT[E],
1000,  params_SS)),
AT[E])
###The initial finder holds the initial I should have
Initial_Finder <- NULL
for (E in seq(1, length(AT))) {
Initial_Finder[[E]] =
cbind(rbind(onesp_insect_damage(AT[E],
1000,  params_SS)),
AT[E])
}
Initial_Finder
Rcpp::sourceCpp("RCPP/ERLANGSPRAY_SS.cpp")
shape_spray_df <-
cbind(AT_decay_shape,
times=mapply(ss_shape_spray_no,
AT_decay_shape$Shape,
AT_decay_shape$Decay,
AT_decay_shape$AT))
source("P:/IPM_Management_FINAL/Code_Functions/ss_shape_spray_no.R", echo=TRUE)
ss_shape_spray_no <- function(shape1, decay1, AT,initial1){
source("P:/IPM_Management_FINAL/Code_Functions/ss_shape_spray_no.R", echo=TRUE)
source("P:/IPM_Management_FINAL/Code_Functions/ss_shape_spray_no.R", echo=TRUE)
source("P:/IPM_Management_FINAL/Code_Functions/ss_shape_spray_no.R", echo=TRUE)
shape_spray_df <-
cbind(AT_decay_shape,
times=mapply(ss_shape_spray_no,
AT_decay_shape$Shape,
AT_decay_shape$Decay,
AT_decay_shape$AT))
AT_decay_shape
shape_spray_df <-
cbind(AT_decay_shape,
times=mapply(ss_shape_spray_no,
AT_decay_shape$Shape,
AT_decay_shape$decay,
AT_decay_shape$AT))
Initial_Finder
AT_decay_shape$Initial1 <- do.call(rbind, Initial_Finder)
AT_decay_shape
max(out_put_4$S2)
AT <-  c(10,20,40,60,80)
decay <- round(seq(0.01, 1/7,length=10),2)
AT_decay_shape <- expand.grid(AT=AT,decay= decay,Shape= Shape)
params_SS   <-   c(n=4, dev =1/30 ,mu = 0.33)
###The initial finder holds the initial I should have
Initial_Finder <- NULL
